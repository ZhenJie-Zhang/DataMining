apply(data.frame(c(1,2),c(3,4)), 1, sum)
data.frame(c(1,2),c(3,4))
dim(as.array(letters))
array(1:3, c(2,4))
apply(array(1:3, c(2,4)),1,sum)
apply(array(1:3, c(2,4)),2,sum)
apply(array(1:3, c(2,4)),3,sum)
data.frame(c(1,2),c(3,4))
apply(data.frame(c(1,2),c(3,4)), 1, sum)
apply(data.frame(c(1,2),c(3,4)), 2, sum)
apply(data.frame(c(1,2),c(3,4)), as.vector(2), sum)
apply(titanic,2, sum)
mosaicplot(table(full[1:891,c('Pclass','Sex','Survived')]),
sort=c(2, 1, 3), dir=c('v', 'h', 'h'), color=T, off=3)
full[,!2:3]
full[!2:3]
full[,!"Age"]
full[,!names(full) %in% c('Age')]
full[,!which(names(full) %in% c('Age'))]
which(names(full) %in% c('Age'))
which(names(full) %in% c('Age', 'Pclass'))
which(!names(full) %in% c('Age', 'Pclass'))
!names(full) %in% c('Age','Pclass')
# 首先我們來看年齡與生存情況之間的關係
ggplot(full[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
# 分性別來看，因為前面我們知道 性別對於生存情況有重要影響
facet_grid(.~Sex) +
theme_few()
# 生成母親變量
full$Mother <- 'NotMother'
full$Mother[  full$Sex =='female'
& full$Parch > 0
& full$Age > 18
& full$Title != 'Miss'] <- 'Mother'
full[full$Title != 'Miss',c(1,2,3)]
nrow(full[full$Title != 'Miss','Age'])
full[full$Title != 'Miss','Age']
full[full$Title != 'Miss','Age' & full$Age <= 18]
full[full$Title != 'Miss','Age' & full$Age <= 18,'Title']
full[full$Title != 'Miss' & full$Age <= 18,'Title']
full[full$Sex =='female' & full$Parch > 0 & full$Title != 'Miss' & full$Age <= 18,'Title']
full[full$Sex =='female' & full$Parch > 0 & full$Title != 'Miss' & full$Age <= 18,c('Name','Title')]
full[full$Sex =='female' & full$Parch > 0 & full$Title != 'Miss' & full$Age <= 18,c('Name','Title','Age')]
View(full)
full[full$Sex =='female' & full$Parch > 0 & full$Title != 'Miss' & full$Age <= 18,c('Name','Title','Age','Cabin','Pclass')]
full[full$Sex =='female' & full$Parch > 0 & full$Title != 'Miss' & full$Age <= 18,c('Name','Title','Age','Cabin','Pclass','Fare')]
# 統計對於數量
table(full$Mother, full$Survived)
full$Child
# 生成兒童（child）變量, 並且基於此劃分兒童child與成人adult
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# 展示對應人數
table(full$Child, full$Survived)
##
## 0 1
## Mother 16 39
## Not Mother 533 303
# 對新生成的兩個變量完成因子化。
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
# 至此，所有我們需要的變量都已經生成，並且其中沒有缺失值。
# 為了保險起見，我們進行二次確認。
# 這個起到什麼作用?
md.pattern(full)
# 這個起到什麼作用?
md.pattern(full)
aggr_plot <- aggr(full, col = c('navyblue', 'red'), numbers=TRUE, sortVars=TRUE,
labels=names(full), cex.axis=.7, gap=3,
ylab=c("Histogram of missing data", "Pattern"))
library(VIM)
aggr_plot <- aggr(full, col = c('navyblue', 'red'), numbers=TRUE, sortVars=TRUE,
labels=names(full), cex.axis=.7, gap=3,
ylab=c("Histogram of missing data", "Pattern"))
# 從圖上也可以顯而易見的觀察出來，個人與大家庭不利於生存下來，
# 而相對的小家庭當中生存率相對較高
# c. 試著生成更多變量
# 可以發現在乘客客艙變量passenger cabin也存在一些有價值的信息如客艙層數deck
# 可以看出這一變量有很多缺失值
full$Cabin[1:28]
# 第一個字母即為客艙層數.如:
strsplit(full$Cabin[2], NULL)[[1]]
strsplit(full$Cabin[2], NULL)[[1]][1]
summary(full$Deck)
# 這個起到什麼作用?
md.pattern(full[1:891,])
aggr_plot <- aggr(full[1:891,], col = c('navyblue', 'red'), numbers=TRUE, sortVars=TRUE,
labels=names(full), cex.axis=.7, gap=3,
ylab=c("Histogram of missing data", "Pattern"))
# 這個起到什麼作用?
md.pattern(full[1:891,])
str(full[1:891,])
summary(full[1:891,])
is.na('')
is.na()
is.na(NaN)
is.na(' ')
View(aggr_plot)
aggr(full[1:891,], col = c('navyblue', 'red'), numbers=TRUE, sortVars=TRUE,
labels=names(full), cex.axis=.7, gap=3,
ylab=c("Histogram of missing data", "Pattern"))
as.factor(sapply(full$Cabin, function(x) ifelse(is.na(x), 'X', str_sub(x, start = 1, end = 1))))
# a. 拆分訓練集與測試集 ----
# 我們第一步需要將數據變回原先的訓練集與測試集。
# 將數據拆分為訓練集與測試集
train <- full[1:891,]
test <- full[892:1309,]
# b. 建立模型
# 我們利用訓練集訓練建立隨機森林 randomForest 模型。
# 設置隨機種子
set.seed(754)
train$Sex*Train$Parch
train$Sex*train$Parch
# 建立模型l (注意: 不是所有可用變量全部加入)
rf_model <- randomForest(factor(Survived) ~
Pclass + Sex + Age +
SibSp + Sex*Parch + Fare +
Embarked + Title + FsizeD +
Child + Mother,
data = train)
# 顯示模型誤差
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
View(rf_model)
# c.變量重要性 ----
# 通過計算Gini係數得到相應變量的重要性排序
# 獲取重要性係數
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[ ,'MeanDecreaseGini'],2))
# 基於重要性係數排列變量
rankImportance <- varImportance %>% mutate(Rank = paste0('#',dense_rank(desc(Importance))))
View(varImportance)
View(varImportance)
View(importance)
View(varImportance)
varImportance
varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
detach("package:plyr", unload = TRUE)
library(dplyr)
# 基於重要性係數排列變量
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
View(rankImportance)
#通過 ggplot2 繪製相關重要性變量圖
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour= 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
prediction <- predict(rf_model, test)
# 將結果保存為數據框，按照Kaggle提交文檔的格式要求。[兩列：PassengerId and Survived (prediction)]
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
View(solution)
merge(test , solution, by.x="PassengerID", by.y="PassengerID")
View(test)
merge(test , solution, by.x="PassengerId", by.y="PassengerId")
merge(test , solution, by.x="PassengerId", by.y="PassengerID")
View(merge(test , solution, by.x="PassengerId", by.y="PassengerID"))
View(merge(test[,-2] , solution, by.x="PassengerId", by.y="PassengerID")
View(merge(test[,-2] , solution, by.x="PassengerId", by.y="PassengerID"))
merge(test[,-2] , solution, by.x="PassengerId", by.y="PassengerID")['Survived'==1,"Title"]
merge(test[,-2] , solution, by.x="PassengerId", by.y="PassengerID")['Survived'==1,]
merge(test[,-2] , solution, by.x="PassengerId", by.y="PassengerID")$Survived == 1
finall<- merge(test[,-2] , solution, by.x="PassengerId", by.y="PassengerID")
finall[finall$Survived==1,]
table(finall[finall$Survived==1,]$Title)
table(finall[finall$Survived==1,"Title", "Fare", "Sex"])
ftable(finall[finall$Survived==1,"Title", "Fare", "Sex"])
ftable(finall[finall$Survived==1,c("Title", "Fare", "Sex")])
table(finall[finall$Survived==1,c("Title", "Fare", "Sex")])
ftable(finall[finall$Survived==1,c("Title", "Fare", "Sex")], row.vars = 1:2, col.vars = 3)
ftable(finall[finall$Survived==1,c("Title", "Fare", "Sex")], row.vars = 2:3, col.vars = 1)
ftable(finall[finall$Survived==1,c("Title", "Sex")])
plot(density(ftable(finall[finall$Survived==1,c("Fare")])))
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) + theme_few()
median(finall[finall$Survived==1,c("Fare")])
# 用 ggplot2 繪製embarkment, passenger class, & median fare 三者關係圖
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
ggplot(finall[finall$Survived==1,], aex(x = Embarked, y = Fare, fill = factor(Pclass)))+
geom_boxplot() +
scale_y_continuous(lables=dollar_format()) +
theme_few()
ggplot(finall[finall$Survived==1,], aes(x = Embarked, y = Fare, fill = factor(Pclass)))+
geom_boxplot() +
scale_y_continuous(lables=dollar_format()) +
theme_few()
ggplot(finall[finall$Survived==1,], aes(x = Embarked, y = Fare, fill = factor(Pclass)))+
geom_boxplot() +
scale_y_continuous(labels=dollar_format()) +
theme_few()
sum(finall$Survived == 1)
ggplot(finall[finall$Survived==1,], aes(x = Sex, y = Fare, fill = factor(Title)))+
geom_boxplot() +
scale_y_continuous(labels=dollar_format()) +
theme_few()
View(finall)
gsub('(.*, )|(\\..*)', '', "132312\132")
gsub('(.*, )|(\\..*)', '', "132312\.132")
train <- read.csv("E:/DataMining/titanic/train.csv", header = T, stringsAsFactors = F)
View(train)
gsub('(.*, )|(\..*)', '', "132312\.132")
gsub('(.*, )|(\..*)', '', "132312\132")
train$Name
gsub('(.*, )|(\..*)', '', "train$Name")
gsub('(.*, )|(\\..*)', '', "train$Name")
gsub('(.*, )|(\\..*)', '', train$Name)
gsub('(.*, )', '', train$Name)
gsub('(\\..*)', '', train$Name)
gsub('(.*, )|(\\..*)', '', train$Name)
train$Name
gsub('(.*, )|(\\..*)', '', train$Name)
gsub("([ab])", "\\1_\\1_", "abc and ABC")
str <- "Now is the time      "
sub(" +$", "", str)  ## spaces only
## what is considered 'white space' depends on the locale.
sub("[[:space:]]+$", "", str) ## white space, POSIX-style
## what PCRE considered white space changed in version 8.34: see ?regex
sub("\\s+$", "", str, perl = TRUE) ## PCRE-style white space
library('ggplot2') # 可視化
library('ggthemes') # 可視化
library('scales') # 可視化
library('dplyr') # 數據處理
library('mice') # 缺失值填補
library('randomForest') # 建模
test <- read.csv("E:/DataMining/titanic/test.csv", header = T, stringsAsFactors = F)
train <- read.csv("E:/DataMining/titanic/train.csv", header = T, stringsAsFactors = F)
#可以看到，除了Survived欄位不同外，其他欄位均相同。合併訓練集與測試集，為下一步數據清洗做準備
full <- bind_rows(train, test)
# 1.數據清洗 ----
# a. 觀察姓名變量----
# 從乘客名字中提取頭銜
full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
# 對於那些出現頻率較低的頭銜合併為一類
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
# 對於一些稱呼進行重新指定（按含義） 如mlle, ms指小姐, mme 指女士
full$Title[full$Title =='Mlle']<- 'Miss'
full$Title[full$Title =='Ms'] <- 'Miss'
full$Title[full$Title =='Mme']<- 'Mrs'
full$Title[full$Title %in% rare_title] <- 'Rare Title'
# 重新查看替換後的情況
table(full$Sex, full$Title)
# 最後從乘客姓名中，提取姓氏
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
nlevels(factor(full$Surname))
# 生成家庭人數變量，包括自己在內
full$Fsize <- full$SibSp + full$Parch + 1
# 生成一個家庭變量：以姓_家庭人數 格式
full$Family <- paste(full$Surname, full$Fsize, sep='_')
# 使用 ggplot2 繪製家庭人數與生存情況之間的關係
ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
geom_bar(stat='count', position='dodge') +
scale_x_continuous(breaks=c(1:11)) +
labs(x = 'Family Size') +
theme_few()
# 通過圖形我們可以明顯發現以下特點：
# - 1. 個人上船和家庭人數>4人的家庭的存活人數小於死亡人數
# - 2. 家庭人數size在[2:4]的存活人數要高於死亡人數
# 因此我們可以將家庭人數變量進行分段合併，
# 明顯的可以分為3段：個人，小家庭，大家庭，由此生成新變量。
ftable(full[1:891,c('Survived','Pclass','Sex')],
row.vars = c('Sex','Survived'),
col.vars = 'Pclass')
table(full[1:891,c('Pclass','Sex','Survived')])
mosaicplot(table(full[1:891,c('Pclass','Sex','Survived')]),
sort=c(2, 1, 3), dir=c('v', 'h', 'h'), color=T, off=3)
# datasets::Titanic----
mosaicplot(Titanic, main = "Survival on the Titanic", color = TRUE)
# https://en.wikipedia.org/wiki/Mosaic_plot
# https://commons.wikimedia.org/wiki/File:Mosaic_titanic_independent.png
# Mosaic_plot - wiki, example table
ftable(apply(Titanic, c('Sex','Survived','Class'), sum))
ftable(apply(Titanic, c(2,4,1), sum))
# Mosaic_plot - wiki, example-----
par(mfrow=c(1,2))
# png("mosaic_titanic_independent.png", width=800, height=480)
titanic <- apply(Titanic, c(1,2,4), sum)
# titanic <- apply(Titanic, c('Class','Sex','Survived'), sum)
mosaicplot(titanic, sort=c(2, 1, 3), dir=c('v', 'h', 'h'), color=T, off=3)
independent <- outer(outer(apply(titanic, 1, sum), apply(titanic,2, sum)), apply(titanic, 3, sum))/sum(titanic)^2
dimnames(independent) <- dimnames(titanic)
mosaicplot(independent, sort=c(2, 1, 3), dir=c('v', 'h', 'h'), color=T, off=3)
# 離散化
full$FsizeD[full$Fsize == 1] <- 'singleton'
full$FsizeD[full$Fsize > 1 & full$Fsize <= 4]<- 'small'
full$FsizeD[full$Fsize > 4] <- 'large'
# 通過馬賽克圖（mosaic plot）查看家庭規模與生存情況之間關係
mosaicplot(table(full$FsizeD,full$Survived), main='Family Size by Survival', shade=TRUE)
# 從圖上也可以顯而易見的觀察出來，個人與大家庭不利於生存下來，
# 而相對的小家庭當中生存率相對較高
# c. 試著生成更多變量
# 可以發現在乘客客艙變量passenger cabin也存在一些有價值的信息如客艙層數deck
# 可以看出這一變量有很多缺失值
full$Cabin[1:28]
# 第一個字母即為客艙層數.如:
strsplit(full$Cabin[2], NULL)[[1]]
strsplit(full$Cabin[2], NULL)[[1]][1]
# 建立一個層數變量（Deck）變化取值從 A - F:
full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
summary(full$Deck)
# a. 登船港口缺失——中位數 ----
summary(full$Embarked)
full[full$Embarked=="", c(-4:-5, -18:-13)]
# 乘客 62 and 830 缺少登船港口信息。
full[c(62, 830), 'Embarked']
# 我估計對於有相同艙位等級（passenger class）和票價（Fare）的乘客
# 也許有著相同的登船港口位置embarkment 。
# 我們可以看到他們支付的票價分別為：$ 80 和 $ 80
# 同時他們的艙位等級分別是：1 和 1 。
# 那麼他們最有可能是在哪個港口登船的呢？
median(full[full$Embarked == "C" & full$Pclass==1,'Fare'])
median(full[full$Embarked == "Q" & full$Pclass==1,'Fare'])
median(full[full$Embarked == "S" & full$Pclass==1,'Fare'])
# 去除缺失值乘客的ID
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
# 用 ggplot2 繪製embarkment, passenger class, & median fare 三者關係圖
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept=80),
colour='red', linetype='dashed', lwd=2) +
scale_y_continuous(labels=dollar_format()) +
theme_few()
# 很明顯！
# 從港口 ('C')出發的頭等艙支付的票價的中位數為80。
# 因此我們可以放心的把處於頭等艙且票價在$80的乘客62和830 的出發港口缺失值替換為'C'。
# 因為他們票價為80且處於頭等艙,因而他們很有可能都是從港口C登船的。
full$Embarked[c(62, 830)] <- 'C'
# b. 票價缺失 ——中位數 ----
# 這裡發現1044行的乘客票價為空值
summary(full$Fare)
full[is.na(full$Fare), c(-4:-5, -18:-13)]
# 提取1044行數據
full[1044, ]
# 這是從港口Southampton ('S')出發的三等艙乘客。
# 從相同港口出發且處於相同艙位的乘客數目為 (n = 494)。
sum(full$Embarked=="S" & full$Pclass==3)
nrow(full[full$Embarked=="S" & full$Pclass==3,])
ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ],
aes(x = Fare)) +
geom_density(fill = '#99d6ff', alpha=0.4) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)),
colour='red', linetype='dashed', lwd=1) +
scale_x_continuous(labels=dollar_format()) + theme_few()
# 從得到的圖形上看,將缺失值用中位數進行替換是合理的。替換數值為$8.05
# 基於出發港口和客艙等級，替換票價缺失值
full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare,
na.rm = TRUE)
# c. 年齡缺失——預測填補 ----
#
# 最後，正如我們之前觀察到的，在用戶年齡（Age）中有大量的缺失存在。
# 這裡我們將基於年齡和其他變量構建一個預測模型對年齡缺失值進行預測。
# S統計缺失數量
sum(is.na(full$Age))
# 通常我們會使用 rpart (recursive partitioning for regression) 包來做缺失值預測
# 在這裡我將使用 mice 包進行處理。
# 具體理由，你可以通過閱讀關於
# 基於鏈式方程 Chained Equations的
# 多重插補法MultipleImputation（MICE）的內容MICE (PDF)。
# 在這之前我們先要對因子變量（factor variables）因子化，
# 然後再進行多重插補法。
colnames(full)
# 使因子變量因子化
factor_vars <-  c('PassengerId','Pclass','Sex','Embarked',
'Title','Surname','Family','FsizeD')
full[factor_vars] <-  lapply(full[factor_vars],function(x) as.factor(x))
# 設置隨機種子
set.seed(129)
# 剔除一些沒什麼用的變量之後，再執行多重插補法，:
mice_mod <-  mice(full[, !names(full) %in%
c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')],
method='rf')
# 保存完整輸出
mice_output <-  complete(mice_mod)
# 讓我們對比數據填補前與填補後的數據分布情況。確保數據分布沒用發生偏移
# 繪製年齡分布圖
par(mfrow=c(1,2))
hist(full$Age, freq=F, main='Age: Original Data',
col='darkgreen', ylim=c(0,0.04))
hist(mice_output$Age, freq=F, main='Age: MICE Output',
col='lightgreen', ylim=c(0,0.04))
# MICE模型結果替換年齡變量.
full$Age <- mice_output$Age
# 檢查缺失值是否被完全替換了
sum(is.na(full$Age))
# 首先我們來看年齡與生存情況之間的關係
ggplot(full[1:891,], aes(Age, fill = factor(Survived))) +
geom_histogram() +
# 分性別來看，因為前面我們知道 性別對於生存情況有重要影響
facet_grid(.~Sex) +
theme_few()
# 生成兒童（child）變量, 並且基於此劃分兒童child與成人adult
full$Child[full$Age < 18] <- 'Child'
full$Child[full$Age >= 18] <- 'Adult'
# 展示對應人數
table(full$Child, full$Survived)
# 生成母親變量
full$Mother <- 'NotMother'
full$Mother[  full$Sex =='female'
& full$Parch > 0
& full$Age > 18
& full$Title != 'Miss'] <- 'Mother'
# 統計對於數量
table(full$Mother, full$Survived)
##
## 0 1
## Mother 16 39
## Not Mother 533 303
# 對新生成的兩個變量完成因子化。
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
# 這個起到什麼作用?
md.pattern(full[1:891,])
library(VIM)
aggr(full[1:891,], col = c('navyblue', 'red'), numbers=TRUE, sortVars=TRUE,
labels=names(full), cex.axis=.7, gap=3,
ylab=c("Histogram of missing data", "Pattern"))
summary(full[1:891,])
# a. 拆分訓練集與測試集 ----
# 我們第一步需要將數據變回原先的訓練集與測試集。
# 將數據拆分為訓練集與測試集
train <- full[1:891,]
test <- full[892:1309,]
# b. 建立模型
# 我們利用訓練集訓練建立隨機森林 randomForest 模型。
# 設置隨機種子
set.seed(754)
# 建立模型l (注意: 不是所有可用變量全部加入)
rf_model <- randomForest(factor(Survived) ~
Pclass + Sex + Age +
SibSp + Sex*Parch + Fare +
Embarked + Title + FsizeD +
Child + Mother,
data = train)
# 顯示模型誤差
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
# c.變量重要性 ----
# 通過計算Gini係數得到相應變量的重要性排序
# 獲取重要性係數
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'MeanDecreaseGini'],2))
# 基於重要性係數排列變量
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
#通過 ggplot2 繪製相關重要性變量圖
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour= 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
prediction <- predict(rf_model, test)
View(test)
View(train)
test$prediction <- predict(rf_model, train[,-2])
predict(rf_model, train[,-2])
train$prediction <- predict(rf_model, train[,-2])
mean(abs(train$Survived - train$prediction)/train$Survived)
mean(abs(train$Survived - train$prediction)/train$Survived))
mean(abs(train$Survived-train$prediction)/train$Survived)
abs(train$Survived-train$prediction)
train$Survived-train$prediction
mean(abs(as.numeric(train$Survived) - as.numeric(train$prediction))/as.numeric(train$Survived))
as.numeric(train$Survived) - as.numeric(train$prediction)
View(train)
as.numeric(train$Survived)
as.numeric(train$prediction)
str(train)
train$Survived - as.integer(train$prediction)
as.integer(train$prediction)
str(train)
train$prediction
factor(train$prediction)
train$prediction
str(train)
str(is.integer(train$prediction))
is.character(train$prediction)
as.character(train$prediction)
as.numeric(as.character(train$prediction))
train$Survived - as.numeric(as.character(train$prediction))
mean(abs(train$Survived - as.numeric(as.character(train$prediction))) / train$Survived)
require(caret)
library(tidyr)
confusionMatrix(train$Survived, as.numeric(as.character(train$prediction)), positive = "1")
table(train$Survived, as.numeric(as.character(train$prediction)))
prop.table(train$Survived, as.numeric(as.character(train$prediction)))
prop.table(table(train$Survived, as.numeric(as.character(train$prediction))))
confusionMatrix <- prop.table(table(train$Survived, as.numeric(as.character(train$prediction))))
confusionMatrix <- table(train$Survived, as.numeric(as.character(train$prediction)))
confusionMatrix
TP <- confusionMatrix[1,1]
TP <- confusionMatrix[2,2]
TN <- confusionMatrix[1,1]
sum(confusionMatrix)
(TP+TN)/sum(confusionMatrix)
